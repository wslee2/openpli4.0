--- a/src/gstdvbaudiosink.c
+++ b/src/gstdvbaudiosink.c
@@ -194,7 +194,9 @@ GST_STATIC_PAD_TEMPLATE (
 		X_RAW_INT(32,32)
 		"audio/mpeg; "
 		"audio/x-ac3; "
+		"audio/x-eac3; "
 		"audio/x-private1-ac3; "
+		"audio/x-private1-eac3; "
 		"audio/x-dts; "
 		"audio/x-private1-dts; "
 		"audio/x-private1-lpcm; "
@@ -303,6 +305,7 @@ gst_dvbaudiosink_get_caps (GstBaseSink *basesink)
 //	GstDVBAudioSink *self = GST_DVBAUDIOSINK (basesink);
 //	gchar *strcaps;
 	GstCaps *caps;
+#if defined(DREAMBOX)
 	static int eac3_support;
 
 	if (!eac3_support) {
@@ -325,6 +328,7 @@ gst_dvbaudiosink_get_caps (GstBaseSink *basesink)
 		gst_caps_remove_structure(caps, 12); // remove x-private-eac3
 	}
 	else
+#endif
 		caps = gst_static_caps_get(&hwtemplate->static_caps);
 
 //	strcaps = gst_caps_to_string(caps);
@@ -903,6 +907,10 @@ gst_dvbaudiosink_set_caps (GstBaseSink * basesink, GstCaps * caps)
 		GST_INFO_OBJECT (self, "MIMETYPE %s",type);
 		bypass = 0;
 	}
+	else if (!strcmp(type, "audio/x-eac3")) {
+		GST_INFO_OBJECT (self, "MIMETYPE %s",type);
+		bypass = 0x22;
+	}
 	else if (!strcmp(type, "audio/x-private1-dts")) {
 		GST_INFO_OBJECT (self, "MIMETYPE %s (DVD Audio - 2 byte skipping)",type);
 		bypass = 2;
@@ -922,6 +930,11 @@ gst_dvbaudiosink_set_caps (GstBaseSink * basesink, GstCaps * caps)
 		bypass = 7;
 		self->skip = 2;
 	}
+	else if (!strcmp(type, "audio/x-private1-eac3")) {
+		GST_INFO_OBJECT (self, "MIMETYPE %s (DVD Audio - 2 byte skipping)",type);
+		bypass = 0x22;
+		self->skip = 2;
+	}
 	else if (!strcmp(type, "audio/x-private1-lpcm")) {
 		GST_INFO_OBJECT (self, "MIMETYPE %s (DVD Audio)",type);
 		bypass = 6;
@@ -1319,7 +1332,7 @@ gst_dvbaudiosink_render (GstBaseSink * sink, GstBuffer * buffer)
 			self->timestamp = timestamp;
 		else
 			timestamp = self->timestamp;
-		if (self->bypass < 0xd)
+		if (self->bypass < 0xd || self->bypass == 0x22)
 			self->timestamp += duration;
 	}
 	else
